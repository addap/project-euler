
(define (cross-product set1 set2)
  (flatmap (lambda (elm1)
	     (map (lambda (elm2)
		    (list elm1 elm2))
		  set2))
	   set1))
(define (square x) (* x x))
(define (sum-of-first n)
  (/ (* n (+ n 1))
     2))
(define (divides? a b)
  (= (remainder b a) 0))
(define (digitize number)
  (define (helper number result)
    (if (= number 0)
	result
	(let ((digit (remainder number 10)))
	  (helper (quotient number 10)
		  (cons digit result)))))
;  (reverse
  (if (= number 0)
      '(0)
      (helper number '())))
;)
